// Placeholder chat API functions
import type { Message, Conversation } from "@/types"

export interface SendMessageRequest {
  conversationId: string
  content: string
  collections?: string[]
}

export interface SendMessageResponse {
  message: Message
}

export interface CreateConversationRequest {
  title: string
  collections: string[]
  personality?: string
  role?: string
}

export interface CreateConversationResponse {
  conversation: Conversation
}

// Mock chat functions - replace with actual API calls
export async function sendMessage(request: SendMessageRequest): Promise<SendMessageResponse> {
  // Simulate API delay
  await new Promise((resolve) => setTimeout(resolve, 1000))

  const response: Message = {
    id: Date.now().toString(),
    content: `This is a simulated AI response to: "${request.content}". In a real implementation, this would be generated by your AI model using the selected document collections.`,
    role: "assistant",
    timestamp: new Date(),
    conversationId: request.conversationId,
  }

  return { message: response }
}

export async function createConversation(request: CreateConversationRequest): Promise<CreateConversationResponse> {
  // Simulate API delay
  await new Promise((resolve) => setTimeout(resolve, 500))

  const conversation: Conversation = {
    id: Date.now().toString(),
    title: request.title,
    messages: [],
    collections: request.collections,
    personality: request.personality,
    role: request.role,
    createdAt: new Date(),
    updatedAt: new Date(),
  }

  return { conversation }
}

export async function getConversations(): Promise<Conversation[]> {
  // Simulate API delay
  await new Promise((resolve) => setTimeout(resolve, 500))

  // Return mock conversations
  return []
}

export async function deleteConversation(conversationId: string): Promise<void> {
  // Simulate API delay
  await new Promise((resolve) => setTimeout(resolve, 300))

  // In real implementation, make DELETE request to API
  console.log(`Deleting conversation: ${conversationId}`)
}

export async function updateConversationTitle(conversationId: string, title: string): Promise<void> {
  // Simulate API delay
  await new Promise((resolve) => setTimeout(resolve, 300))

  // In real implementation, make PATCH request to API
  console.log(`Updating conversation ${conversationId} title to: ${title}`)
}
